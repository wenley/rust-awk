program          : item_list
                 ;


item_list        : newline_opt
                 | item_list            item terminator
                 ;


item             : pattern action
                 ;


pattern          : Begin
                 | End
                 | expr
                 | expr ',' newline_opt expr
                 ;


action           : '{' newline_opt                             '}'
                 | '{' newline_opt terminated_statement_list   '}'
                 ;


terminator       : ';' newline_opt
                 ;


terminated_statement_list : terminated_statement
                 | terminated_statement_list terminated_statement
                 ;

terminated_statement : action newline_opt
                 | If '(' expr ')' newline_opt terminated_statement
                       Else newline_opt terminated_statement
                 | While '(' expr ')' newline_opt terminated_statement
                 | For '(' NAME In NAME ')' newline_opt
                      terminated_statement
                 | terminator
                 | terminatable_statement ';'     newline_opt
                 ;

terminatable_statement : simple_statement
                 | Break
                 | Continue
                 | Next
                 | Exit expr_opt
                 | Return expr_opt
                 | Do newline_opt terminated_statement While '(' expr ')'
                 ;


simple_statement_opt : /* empty */
                 | simple_statement
                 ;


simple_statement : Delete NAME '[' expr_list ']'
                 | expr
                 | print_statement
                 | lvalue '=' expr
                 ;


print_statement  : Print  '(' expr_list ')'
                 ;


expr_list_opt    : /* empty */
                 | expr_list
                 ;


expr_list        : expr
                 | multiple_expr_list
                 ;


multiple_expr_list : expr ',' newline_opt expr
                 | multiple_expr_list ',' newline_opt expr
                 ;


expr_opt         : /* empty */
                 | expr
                 ;


expr             : unary_expr
                 | non_unary_expr
                 | binary_expr
                 ;


unary_expr       : '+' expr
                 | '-' expr
                 | '!' expr
                 ;

binary_expr      : expr '^' expr
                 | expr '*'      expr
                 | expr '/'      expr
                 | expr '%'      expr
                 | expr '+'      expr
                 | expr '-'      expr
                 | expr          non_unary_expr
                 | expr 'Ëœ'      expr
                 | expr NO_MATCH expr
                 | expr In NAME
                 | expr AND newline_opt expr
                 | expr OR  newline_opt expr
                 | expr '?' expr ':' expr
                 | boolean_expr
                 ;

non_unary_expr   : '(' expr ')'
                 | '(' multiple_expr_list ')' In NAME
                 | literal_expr
                 | lvalue
                 | BUILTIN_FUNC_NAME '(' expr_list_opt ')'
                 | BUILTIN_FUNC_NAME
                 | boolean_expr
                 ;

literal_expr     : NUMBER
                 | STRING
                 | ERE
                 ;


boolean_expr     : expr '<' expr
                 | expr LE  expr
                 | expr LE  expr
                 | expr NE  expr
                 | expr EQ  expr
                 | expr '>' expr
                 | expr GE  expr
                 ;


lvalue           : NAME
                 | NAME '[' expr_list ']'
                 | '$' expr
                 ;


newline_opt      : /* empty */
                 | newline_opt NEWLINE
                 ;
